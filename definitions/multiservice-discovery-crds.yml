# Service account (necessary).
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-discovery
  namespace: observability-stack
  labels:
    app.kubernetes.io/name: service-discovery
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/instance: service-discovery
    app.kubernetes.io/name: service-discovery
  name: service-discovery
  namespace: observability-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: Aggregator
      app.kubernetes.io/instance: service-discovery
      app.kubernetes.io/name: service-discovery
  template:
    metadata:
      labels:
        app.kubernetes.io/component: Aggregator
        app.kubernetes.io/instance: service-discovery
        app.kubernetes.io/name: service-discovery
    spec:
      containers:
        - image: ghcr.io/dfinity/dre/multiservice-discovery:f7b34e66fe27d55e3907872be835afd7396df220
          imagePullPolicy: IfNotPresent
          name: service-discovery
          ports:
            - containerPort: 8000
              name: server
              protocol: TCP
          args:
            - --targets-dir
            - /tmp
            - --networks-state-file
            - /tmp/definitions.json
      serviceAccountName: service-discovery
      terminationGracePeriodSeconds: 60
---
# Service exposed to public.
apiVersion: v1
kind: Service
metadata:
  name: service-discovery
  namespace: observability-stack
  labels:
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/instance: service-discovery
    app.kubernetes.io/name: service-discovery
spec:
  type: NodePort
  ports:
    - name: server
      nodePort: 32080
      port: 8000
      protocol: TCP
      targetPort: server
  selector:
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/instance: service-discovery
    app.kubernetes.io/name: service-discovery
